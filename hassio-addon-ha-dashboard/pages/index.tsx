import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React from "react";
import type { HassEntities, HassEntity } from "home-assistant-js-websocket";
import { Card } from "../lib/Card";
import { GarageIcon, HeaterIcon, ThermometerIcon } from "../lib/icons";
import { format } from "date-fns";
import { relativeTimeShort } from "../lib/dates";
import { useHAState } from "../lib/ha";

const Home: NextPage = () => {
  const { states, callService } = useHAState();

  return (
    <div>
      <Head>
        <title>HA Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.sidebar}>
          <CurrentTime />
          <CurrentDate />
          <Greeting />
          <Weather states={states} />
        </div>
        <CardBlock title="Home">
          <PersonCard entity={states["person.sam"]} />
          <PersonCard entity={states["person.whitney"]} />
          <PersonCard entity={states["person.craig"]} />
          <PersonCard entity={states["person.adam"]} />
        </CardBlock>
        <CardBlock title="Garage">
          <GarageDoorsCard
            left={states["binary_sensor.garage_door_left"]}
            right={states["binary_sensor.garage_door_right"]}
          />
        </CardBlock>
        <CardBlock title="Office">
          <Card
            entity={states["sensor.temperature_sensor_b"]}
            isActive={() => false}
            icon1={() => <ThermometerIcon />}
            state={(ent) => `${Math.round(Number.parseFloat(ent.state))}°`}
            name={(ent) => relativeTimeShort(new Date(ent.last_changed))}
          />
          <Card
            entity={states["switch.aqara_plug_office_heater"]}
            isActive={(ent) => ent.state === "on"}
            icon1={() => <HeaterIcon />}
            state={(ent) => (ent.state === "on" ? "On" : "Off")}
            onTap={(ent) =>
              callService(
                "switch",
                ent.state === "on" ? "turn_off" : "turn_on",
                {},
                {
                  entity_id: ent.entity_id,
                }
              )
            }
          />
        </CardBlock>
        <CardBlock title="Gym">
          <Card
            entity={states["sensor.weather_sensor_a_temperature"]}
            isActive={() => false}
            icon1={() => <ThermometerIcon />}
            state={(ent) => `${Math.round(Number.parseFloat(ent.state))}°`}
            name={(ent) => relativeTimeShort(new Date(ent.last_changed))}
          />
        </CardBlock>
      </main>
    </div>
  );
};

interface CardBlockProps {
  title: string;
  children: React.ReactElement | React.ReactElement[];
}
function CardBlock(props: CardBlockProps) {
  return (
    <div className={styles.cardSection}>
      <div className={styles.cardSectionHeader}>{props.title}</div>
      {props.children}
    </div>
  );
}

const CurrentTime = () => {
  const displayTime = format(new Date(), "hh:mm");
  return <div style={{ fontSize: "82px" }}>{displayTime}</div>;
};

const CurrentDate = () => {
  const dayOfWeek = format(new Date(), "iiii");
  const displayDate = format(new Date(), "LLLL do");
  return (
    <div style={{ fontSize: "32px" }}>
      <div>{dayOfWeek}</div>
      {displayDate}
    </div>
  );
};

const Greeting = () => {
  const time = new Date().getHours();

  return (
    <b style={{ color: "rgba(255, 255, 255, 0.8)", fontSize: "28px" }}>
      {(() => {
        if (time <= 5) {
          return `Good night 😴`;
        } else if (time <= 10) {
          return `Good morning ☕️`;
        } else if (time <= 13) {
          return `Good afternoon 😊`;
        } else if (time <= 17) {
          return `Good afternoon 😎`;
        } else if (time <= 19) {
          return `Good evening 🍺`;
        } else if (time <= 22) {
          return `Good night 😌`;
        } else if (time <= 23) {
          return `Good night 🥴`;
        } else {
          return `Good night 🥴`;
        }
      })()}
    </b>
  );
};

interface WeatherProps {
  states: HassEntities;
}
const Weather = (props: WeatherProps) => {
  const { states } = props;

  const TEMP = "sensor.openweathermap_temperature";
  const FEELS_LIKE = "sensor.openweathermap_feels_like_temperature";
  const PRECIP = "sensor.openweathermap_forecast_precipitation_probability";

  if (!states[TEMP] || !states[FEELS_LIKE] || !states[PRECIP]) {
    return null;
  }

  const temperature = Number.parseFloat(states[TEMP].state);
  const apparent = Math.round(Number.parseFloat(states[FEELS_LIKE].state));
  const precip = Math.round(Number.parseFloat(states[PRECIP].state));

  return (
    <div style={{ fontSize: "28px" }}>
      {(() => {
        if (temperature <= 31) {
          return `Feels like ${apparent}° with ${precip}% chance of snow ${
            precip >= 5 ? "\u2744\uFE0F" : ""
          }`;
        } else if (temperature > 31) {
          return `Feels like ${apparent}° with ${precip}% chance of rain ${
            precip >= 5 ? "\u2614\uFE0F" : ""
          }`;
        }
      })()}
    </div>
  );
};

const PersonCard: EntityComponent = ({ entity }) => {
  return (
    <Card
      entity={entity}
      state={(entity) => (entity.state === "home" ? "Home" : "Away")}
      icon1={(entity) => <Picture entity={entity} />}
      icon2={(entity) => <TimeSinceChangedCircle entity={entity} />}
      isActive={(entity) => entity.state === "home"}
    />
  );
};

interface GarageDoorsCardProps {
  left: HassEntity;
  right: HassEntity;
}
function GarageDoorsCard(props: GarageDoorsCardProps) {
  const { left, right } = props;

  return (
    <Card
      entity={left}
      name={(ent) =>
        `${relativeTimeShort(
          new Date(left.last_updated)
        )} - ${relativeTimeShort(new Date(right.last_updated))}`
      }
      state={() =>
        left.state === "on" && right.state === "on"
          ? "Both Open"
          : left.state === "on"
          ? "Left Door Open"
          : right.state === "on"
          ? "Right Door Open"
          : "Closed"
      }
      icon1={() => <GarageIcon active={left.state === "on"} />}
      icon2={() => <GarageIcon active={right.state === "on"} />}
      isActive={() => left.state === "on" || right.state === "on"}
    />
  );
}

export default Home;

type EntityComponent = (props: { entity: HassEntity }) => React.ReactElement;

const Picture: EntityComponent = ({ entity }) => {
  return (
    <div
      className={styles.cardCircle}
      style={{
        backgroundImage: `url(http://homeassistant:8123${entity.attributes.entity_picture})`,
      }}
    ></div>
  );
};

const TimeSinceChangedCircle: EntityComponent = ({ entity }) => {
  return (
    <svg viewBox="0 0 50 50">
      <circle
        cx="25"
        cy="25"
        r="24"
        stroke="currentColor"
        strokeWidth="1.5"
        fill="transparent"
      ></circle>
      <text
        x="50%"
        y="54%"
        fill="currentColor"
        fontSize="14"
        textAnchor="middle"
        alignmentBaseline="middle"
        dominantBaseline="middle"
      >
        {relativeTimeShort(new Date(entity.last_changed))}
      </text>
    </svg>
  );
};
